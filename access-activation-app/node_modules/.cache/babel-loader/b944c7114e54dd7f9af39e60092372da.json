{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport * as LocalForage from 'localforage';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\nvar persistConfig = {\n  key: 'root',\n  storage: LocalForage\n};\nvar persistedReducer = persistReducer(persistConfig, rootReducer);\nexport default (function () {\n  var store = createStore(persistedReducer, applyMiddleware(thunk));\n  var persistor = persistStore(store);\n  return {\n    store: store,\n    persistor: persistor\n  };\n});","map":{"version":3,"sources":["/Users/rani/Documents/projects/Rani-Masters-Project/MastersProject/access-activation-app/src/store/ConfigureStore.ts"],"names":["createStore","applyMiddleware","persistStore","persistReducer","LocalForage","thunk","rootReducer","persistConfig","key","storage","persistedReducer","store","persistor"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,eAA7C;AACA,OAAO,KAAKC,WAAZ,MAA6B,aAA7B;AACA,OAAOC,KAAP,MAAkB,aAAlB;AAEA,OAAOC,WAAP,MAAwB,YAAxB;AAEA,IAAMC,aAAa,GAAG;AAClBC,EAAAA,GAAG,EAAE,MADa;AAElBC,EAAAA,OAAO,EAAEL;AAFS,CAAtB;AAKA,IAAMM,gBAAgB,GAAGP,cAAc,CAACI,aAAD,EAAgBD,WAAhB,CAAvC;AAEA,gBAAc,YAAM;AAChB,MAAIK,KAAK,GAAGX,WAAW,CACnBU,gBADmB,EAEnBT,eAAe,CACXI,KADW,CAFI,CAAvB;AAMA,MAAIO,SAAS,GAAGV,YAAY,CAACS,KAAD,CAA5B;AACA,SAAO;AAAEA,IAAAA,KAAK,EAALA,KAAF;AAASC,IAAAA,SAAS,EAATA;AAAT,GAAP;AACH,CATD","sourcesContent":["import { createStore, applyMiddleware } from 'redux'\nimport { persistStore, persistReducer } from 'redux-persist';\nimport * as LocalForage from 'localforage';\nimport thunk from 'redux-thunk';\n\nimport rootReducer from './reducers';\n\nconst persistConfig = {\n    key: 'root',\n    storage: LocalForage\n}\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nexport default() => {\n    let store = createStore(\n        persistedReducer,\n        applyMiddleware(\n            thunk\n        )\n    )\n    let persistor = persistStore(store)\n    return { store, persistor }\n}"]},"metadata":{},"sourceType":"module"}